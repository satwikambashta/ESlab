#ALP to convert 32-bit pacled BCD number into its hexadecimal equivalent number.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors
		
__Vectors
	
	DCD 0X10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler
	
Reset_Handler
	
	LDR R0,=N1
	LDR R1,=DST
	LDR R2,[R0]
	MOV R3,#1
	MOV R4,#0xA
	MOV R5,#0
	MOV R7,#0xF
up	MOV R6,R2
	AND R6,R7
	MLA R5,R6,R3,R5
	MUL R3,R4
	LSR R2,#4
	CMP R2,#0
	BNE up
	STR R5,[R1]

STOP
	B STOP
	
N1 DCD 0x0A
	AREA mydata, DATA, READWRITE
DST DCD 0
	END



#ALP to convert a 16-bit hexadecimal number into its equivalent packed BCD.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors
		
__Vectors
	
	DCD 0X10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler
	
Reset_Handler
	
	LDR R6,=RESULT
	MOV R2,#00
	LDR R0,=VALUE1
	LDR R1,[R0]
up	CMP R1,#0xA
	BCC store
	SUB R1,#0xA
	ADD R2,#01
	B up
store STRB R1,[R6],#1
	MOV R2,#0
	CMP R1,#0xA
	BCS up
	STRB R1,[R6]
	MOV R3,R6
	LDR R2,=packed
	LDR R6,=RESULT
	SUB R4,R3,R6
up1	LDRB R0,[R6],#1
	LDRB R1,[R6],#1
	LSL R1,#4
	ORR R1,R0
	STRB R1,[R2],#1
	SUB R4,#1
	CMP R4,#2
	BCS up1
STOP
	B STOP
VALUE1 DCD 0xFFFF
	AREA mydata, DATA, READWRITE
RESULT DCD 0,0,0,0,0,0,0,0,0,0
packed DCD 0
	END



#Add two 32-bit packed BCD numbers and store the result in packed BCD form.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors
		
__Vectors
	
	DCD 0X10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler
	
Reset_Handler

	LDR R0,=N1
	LDR R2,[R0]
	LDR R0,=N2
	LDR R3,[R0]
	LDR R0,=DST
	MOV R6,#0
up	MOV R7,R2
	MOV R8,R3
	AND R7,#0xF
	ADD R7,R6
	MOV R6,#0
	AND R8,#0xF
	BL addn
	LSR R2,#4
	CMP R2,#0
	BNE up
	STRB R6,[R0]
STOP
	B STOP
addn ADDS R7,R8
	CMP R7,#0xA
	BCC store
	SUB R7,#0xA
	ADD R6,#01
store STRB R7,[R0],#1

	bx lr

N1 DCD 0x0025
N2 DCD 0x0016
	AREA mydata,DATA,READWRITE
DST DCD 0
	END


#ALP to multiply 2 16-bit packed BCD numbers and 
#store the result in packed BCD form.	

	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler

Reset_Handler
	
	LDR R0, =N1
	LDR R2, [R0]
	BL BCD_HEX
	MOV R9, R5
	LDR R0, =N2
	LDR R2, [R0]
	BL BCD_HEX
	MOV R10, R5
	LDR R0, =PROD
	MUL R9, R10
	BL HEX_BCD
	LDR R9, =TEMP
UP2	LDR R12, [R9], #1
	LDR R11, [R9], #1
	LSL R11, #4
	ORR R12, R11
	STRB R12, [R0], #1
	SUBS R1, #1
	BNE UP2
STOP
	B STOP
BCD_HEX
	MOV R3, #1
	MOV R4, #0XA
	MOV R5, #0
	MOV R7, #0XF
UP	MOV R6, R2
	AND R6, R7
	MLA R5, R6, R3, R5
	MUL R3, R4
	LSR R2, #4
	CMP R2, #0
	BNE UP
	BX LR
HEX_BCD
	MOV R8, #0
	LDR R1, =TEMP
UP1	CMP R9, #0XA
	BCC STORE
	SUB R9, #0XA
	ADD R8, #1
	B UP1
STORE
	STRB R9, [R1], #1
	MOV R9, R8
	MOV R8, #0
	CMP R9, #0XA
	BCS UP1
	STRB R9, [R1]
	LDR R8, =TEMP
	SUB R1, R8
	BX LR

N1 DCD 0X1234
N2 DCD 0X1234
	AREA mydata, DATA, READWRITE
TEMP DCD 0,0
PROD DCD 0,0
	END

#Unpack a 32-bit BCD number into 8 32-bit
#ASCII numbers	


	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors

	DCD 0x10001000
	DCD Reset_Handler
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler

Reset_Handler

	LDR R0, =SRC
	LDR R1, =DST
	LDR R2, [R0]
	MOV R3, #8
	MOV R4, #0XF
	MOV R5, #0X50
UP	MOV R6, R2
	AND R6, R4
	ORR R6, R6, R5
	STR R6, [R1], #4
	SUBS R3, #1
	BNE UP
STOP
	B STOP
SRC DCD 0X00000009
	AREA mydata, DATA, READWRITE
DST DCD 0
	END
