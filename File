#Adding two numbers.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
		
		DCD 0X10001000
		DCD Reset_Handler
		ALIGN
		AREA mycode, CODE, READONLY
		ENTRY
		EXPORT Reset_Handler
Reset_Handler
		
		MOV R0,#10
		MOV R1,#3
		ADD R0,R1
STOP
 		B STOP
		END


#To copy 32-bit data from code memory to data memory.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
		
		DCD 0X10001000
		DCD Reset_Handler
		ALIGN
		AREA mycode, CODE, READONLY
		ENTRY
		EXPORT Reset_Handler

Reset_Handler
	
	LDR R0, =SRC
	LDR R1, =DST
	LDR R3, [R0]
	STR R3, [R1]
STOP
	B STOP
SRC DCD 8

	AREA mydata, DATA, READWRITE
DST DCD 0
	END



#To transfer a 32-bit number from one location 
#in the data memory to another in the data memory.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
		
		DCD 0X10001000
		DCD Reset_Handler
		ALIGN
		AREA mycode, CODE, READONLY
		ENTRY
		EXPORT Reset_Handler

Reset_Handler
	
	LDR R0, =SRC
	LDR R1, =DST
	LDR R3, [R0]
	STR R3, [R1]
STOP
	B STOP
	AREA mydata, DATA, READWRITE
SRC DCD 8
DST DCD 0
	END


#Reverse an array of 10 32-bit numbers in the memory.

	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
		
		DCD 0X10001000
		DCD Reset_Handler
		ALIGN
		AREA mycode, CODE, READONLY
		ENTRY
		EXPORT Reset_Handler

Reset_Handler
	
	LDR R0, =SRC
	LDR R1, =SRC
	ADD R1, #36
	MOV R5, #5
up  LDR R2, [R0]
	LDR R3, [R1]
	STR R2, [R0], #-4
	STR R3, [R0], #4
	SUBS R5, #1
	BNE up
	
STOP
	B STOP
SRC DCD 8

	AREA mydata, DATA, READWRITE
DST DCD 0
	END


#To transfer a block of 10 32-bit numbers when the source 
#and destination blocks are overlapping.


	AREA RESET, DATA, READONLY
	EXPORT __Vectors

__Vectors
	
	DCD 0x10001000 
	DCD Reset_Handler 
	ALIGN
	AREA mycode, CODE, READONLY
	ENTRY
	EXPORT Reset_Handler

Reset_Handler
	
	LDR R0,=SRC 
	LDR R4,=1 
	MOV R6,#10
	MOV R7,#5
lp	STR R4,[R0],#4
	MUL R4,R7;
	SUBS R6,#1
	BNE lp
	LDR R5,=N
	LDR R0,=SRC+(N-1)*4
	MOV R1,R0
	SUB R1,#(OL-1)*4
	ADD R1,#(N-1)*4
UP	LDR R2,[R0],#-4
	STR R2,[R1],#-4
	SUBS R5,#1
	BNE UP
STOP
	B STOP

N EQU 10
OL EQU 2
	AREA mydata, DATA, READWRITE
SRC DCD 1,2,3,4,5,6,7,8,9,10 
	END







